<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陆刚的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luyuzeee.github.io/"/>
  <updated>2018-03-06T10:54:33.387Z</updated>
  <id>https://luyuzeee.github.io/</id>
  
  <author>
    <name>Danile</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gulp安装</title>
    <link href="https://luyuzeee.github.io/2017/09/12/gulp%E6%90%AD%E5%BB%BA/"/>
    <id>https://luyuzeee.github.io/2017/09/12/gulp搭建/</id>
    <published>2017-09-12T12:46:25.000Z</published>
    <updated>2018-03-06T10:54:33.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以下是gulp的安装"><a href="#以下是gulp的安装" class="headerlink" title="以下是gulp的安装"></a>以下是gulp的安装</h2><h4 id="1，gulp的官网地址"><a href="#1，gulp的官网地址" class="headerlink" title="1，gulp的官网地址"></a>1，gulp的官网地址</h4><p>gulp官网地址：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/</a><br>gulp中文文档：<a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/</a><br>gulp插件地址：<a href="http://gulpjs.com/plugins" target="_blank" rel="noopener">http://gulpjs.com/plugins</a><br>gulpAPI地址：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/api/</a></p><h4 id="2，node"><a href="#2，node" class="headerlink" title="2，node"></a>2，node</h4><p>node下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a> </p><h4 id="3，npm和cnpm"><a href="#3，npm和cnpm" class="headerlink" title="3，npm和cnpm"></a>3，npm和cnpm</h4><p>npm服务器在国外，网络影响大，甚至还会遇到需要翻墙才能下载插件的情况，因此推荐安装cnpm。<br>【淘宝npm镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步】。<br>镜像地址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p><h4 id="4，全局安装gulp"><a href="#4，全局安装gulp" class="headerlink" title="4，全局安装gulp"></a>4，全局安装gulp</h4><p>执行cnpm install gulp -g</p><h4 id="5，新建package-json"><a href="#5，新建package-json" class="headerlink" title="5，新建package.json"></a>5，新建package.json</h4><p>执行命令cnpm init (也可以手动在项目根目录上创建)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/09/12/gulp搭建/20160403162526733.png" alt="创建步骤" title="">                </div>                <div class="image-caption">创建步骤</div>            </figure><br>创建成功后</p><p><pre><br><code><br>{<br>  “name”: “test”,<br>  “version”: “1.0.0”,<br>  “description”: “我是描述”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “test”: “echo \”Error: no test specified\” &amp;&amp; exit 1”<br>  },<br>  “author”: “”,<br>  “license”: “ISC”<br>}<br></code><br></pre></p><h4 id="5，本地安装gulp插件"><a href="#5，本地安装gulp插件" class="headerlink" title="5，本地安装gulp插件"></a>5，本地安装gulp插件</h4><p>注：全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能<br>进入你的项目文件路径中后，执行cnpm install gulp –save-dev </p><p>此步骤完成后：项目文件中多了 node_modules 文件夹，里面是你本地安装的插件</p><h5 id="安装gulp插件（已gulp-sass为例）"><a href="#安装gulp插件（已gulp-sass为例）" class="headerlink" title="安装gulp插件（已gulp-sass为例）"></a>安装gulp插件（已gulp-sass为例）</h5><p>进入你的项目文件路径中后，执行cnpm install gulp-sass –save-dev</p><p>常用插件<br>1，sass的编译（gulp-sass）<br>2，less编译 （gulp-less）<br>3，重命名（gulp-rename）<br>4，图片转换为base64-encoded （gulp-img64）<br>5，自动添加css前缀（gulp-autoprefixer）<br>6，压缩css（gulp-clean-css）<br>7，js代码校验（gulp-jshint）<br>8，合并js文件（gulp-concat）<br>9，压缩js代码（gulp-uglify）<br>10，压缩图片（gulp-imagemin）<br>11，自动刷新页面（gulp-livereload，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）<br>12，图片缓存，只有图片替换了才压缩（gulp-cache）<br>13，更改提醒（gulp-notify）<br>14，阻止 gulp 插件发生错误导致进程退出并输出错误日志(gulp-plumber)</p><h4 id="6，新建gulpfile-js（重要，重要，重要）"><a href="#6，新建gulpfile-js（重要，重要，重要）" class="headerlink" title="6，新建gulpfile.js（重要，重要，重要）"></a>6，新建gulpfile.js（重要，重要，重要）</h4><p>gulpfile.js是gulp的配置文件，放于根目录中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//gulpfile.js 示例文件</span><br><span class="line">//导入你所需要用的工具包 require(&apos;node_modules里对应模块&apos;)</span><br><span class="line">var gulp = require(&apos;gulp&apos;),</span><br><span class="line">    sass = require(&apos;gulp-sass&apos;);</span><br><span class="line">// scss 任务</span><br><span class="line">gulp.task(&apos;sass&apos;,function()&#123;</span><br><span class="line">  return gulp.src(&apos;src/css/test.scss&apos;) //获取该任务需要的文件</span><br><span class="line">      .pipe( sass() )                  //该任务调用的模块</span><br><span class="line">      .pipe( gulp.dest(&apos;src/css&apos;) );   //将在 src/css 文件夹中生产test.css</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;sass&apos;,&apos;watch1&apos;]);</span><br><span class="line">//监听文件</span><br><span class="line">gulp.task(&apos;watch1&apos;,function()&#123;</span><br><span class="line">    return gulp.watch(&apos;src/css/test.scss&apos;,[&apos;sass&apos;]);</span><br><span class="line">    //监听 src/css/test.scss 文件，修改时自动执行 sass 任务。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>详细gulp api介绍，可参考官网：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/api/</a></p><h4 id="7，任务文件匹配"><a href="#7，任务文件匹配" class="headerlink" title="7，任务文件匹配"></a>7，任务文件匹配</h4><h5 id="使用数组的方式来匹配多种文件"><a href="#使用数组的方式来匹配多种文件" class="headerlink" title="//使用数组的方式来匹配多种文件"></a>//使用数组的方式来匹配多种文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([&apos;js/*.js&apos;,&apos;css/*.css&apos;,&apos;*.html&apos;])</span><br><span class="line">//以下是匹配一个文件夹下多个html</span><br><span class="line">gulp.src(&apos;./src/html/**/*.html&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([*.js,&apos;!b*.js&apos;]) //匹配所有js文件，但排除掉以b开头的js文件</span><br><span class="line">gulp.src([&apos;!b*.js&apos;,*.js]) //不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span><br></pre></td></tr></table></figure><p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上!即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><h5 id="HTML-，-js-css-压缩（其他插件请参考参见文档-https-gulpjs-com-plugins-）"><a href="#HTML-，-js-css-压缩（其他插件请参考参见文档-https-gulpjs-com-plugins-）" class="headerlink" title="HTML ， js , css 压缩（其他插件请参考参见文档 https://gulpjs.com/plugins/）"></a>HTML ， js , css 压缩（其他插件请参考参见文档 <a href="https://gulpjs.com/plugins/）" target="_blank" rel="noopener">https://gulpjs.com/plugins/）</a></h5><p>以下是一个简单的HTML ， js , css 压缩gulpfile.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/*gulpfile.js 示例文件*/</span><br><span class="line">//导入你所需要用的工具包 require(&apos;node_modules里对应模块&apos;)</span><br><span class="line">var gulp = require(&apos;gulp&apos;),</span><br><span class="line">    sass = require(&apos;gulp-sass&apos;);</span><br><span class="line">// 获取 clean-css 模块（用于压缩 css）</span><br><span class="line">var cleanCSS = require(&apos;gulp-clean-css&apos;);</span><br><span class="line">// 获取 uglify 模块（用于压缩 JS）</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">// 获取 rename 模块（用于重命名）</span><br><span class="line">var rename = require(&quot;gulp-rename&quot;);</span><br><span class="line">// 获取 htmlmin 模块（用于压缩html）</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">// scss 任务</span><br><span class="line">gulp.task(&apos;sass&apos;,function()&#123;</span><br><span class="line">  return gulp.src(&apos;./src/css/**/*.scss&apos;) //获取该任务需要的文件</span><br><span class="line">      .pipe( sass() )                  //该任务调用的模块</span><br><span class="line">      .pipe( gulp.dest(&apos;./src/css&apos;) );   //将在 src/css 文件夹中生产test.css</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 css 文件</span><br><span class="line">// 在命令行使用 gulp csscompress 启动此任务</span><br><span class="line">gulp.task(&apos;csscompress&apos;, function() &#123;</span><br><span class="line">    // 1. 找到文件</span><br><span class="line">   return gulp.src(&apos;./src/css/**/*.css&apos;)</span><br><span class="line">        .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;))</span><br><span class="line">    // 2. 压缩文件</span><br><span class="line">        .pipe(cleanCSS())</span><br><span class="line">        // 3. 另存压缩后的文件</span><br><span class="line">        .pipe(gulp.dest(&apos;./src/dist/css&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 js 文件</span><br><span class="line">// 在命令行使用 gulp jscompress 启动此任务</span><br><span class="line">gulp.task(&apos;jscompress&apos;, function() &#123;</span><br><span class="line">    // 1. 找到文件</span><br><span class="line">   return gulp.src(&apos;./src/js/**/*.js&apos;)</span><br><span class="line">   .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;))</span><br><span class="line">    // 2. 压缩文件</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        // 3. 另存压缩后的文件</span><br><span class="line">        .pipe(gulp.dest(&apos;./src/dist/js&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">//压缩HTML</span><br><span class="line">gulp.task(&apos;minify&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./src/html/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,//清除HTML注释</span><br><span class="line">    collapseWhitespace: true,//压缩HTML</span><br><span class="line">    collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">    removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">    removeScriptTypeAttributes: true,//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class="line">    removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class="line">    minifyJS: true,//压缩页面JS</span><br><span class="line">    minifyCSS: true//压缩页面CSS</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./src/dist/html&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;auto&apos;]);</span><br><span class="line">//监听文件</span><br><span class="line">gulp.task(&apos;auto&apos;,function()&#123;</span><br><span class="line">   gulp.watch(&apos;./src/css/**/*.scss&apos;,[&apos;sass&apos;]); //编译sass</span><br><span class="line">   gulp.watch(&apos;./src/css/**/*.css&apos;,[&apos;csscompress&apos;]);//压缩css</span><br><span class="line">    gulp.watch(&apos;./src/js/**/*.js&apos;,[&apos;jscompress&apos;]);//压缩js</span><br><span class="line">    gulp.watch(&apos;./src/html/**/*.html&apos;,[&apos;minify&apos;]);//压缩html</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="8，运行"><a href="#8，运行" class="headerlink" title="8，运行"></a>8，运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line"></span><br><span class="line">gulp xxxxx       (xxxxx代表gulpfile.js文件里的任务名称)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;以下是gulp的安装&quot;&gt;&lt;a href=&quot;#以下是gulp的安装&quot; class=&quot;headerlink&quot; title=&quot;以下是gulp的安装&quot;&gt;&lt;/a&gt;以下是gulp的安装&lt;/h2&gt;&lt;h4 id=&quot;1，gulp的官网地址&quot;&gt;&lt;a href=&quot;#1，gulp的官网地
      
    
    </summary>
    
      <category term="gulp，压缩，优化，插件，API" scheme="https://luyuzeee.github.io/categories/gulp%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%8C%E4%BC%98%E5%8C%96%EF%BC%8C%E6%8F%92%E4%BB%B6%EF%BC%8CAPI/"/>
    
    
      <category term="gulp，压缩，优化，插件，API" scheme="https://luyuzeee.github.io/tags/gulp%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%8C%E4%BC%98%E5%8C%96%EF%BC%8C%E6%8F%92%E4%BB%B6%EF%BC%8CAPI/"/>
    
  </entry>
  
  <entry>
    <title>placeholder兼容问题</title>
    <link href="https://luyuzeee.github.io/2017/07/13/placeholder%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://luyuzeee.github.io/2017/07/13/placeholder兼容问题/</id>
    <published>2017-07-13T12:46:25.000Z</published>
    <updated>2017-12-05T03:12:33.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以下是angularJs的兼容，运用指令和IE兼容"><a href="#以下是angularJs的兼容，运用指令和IE兼容" class="headerlink" title="以下是angularJs的兼容，运用指令和IE兼容"></a>以下是angularJs的兼容，运用指令和IE兼容</h2><p><pre><br><code><br>starterDirective.directive(‘placeholder’, [‘$compile’, function($compile) {<br>    return {<br>        restrict: ‘A’,<br>        scope: {},<br>        link: function(scope, ele, attr) {<br>            console.log(ele.position().top);<br>            var input = document.createElement(‘input’);<br>            var isSupportPlaceholder = ‘placeholder’ in input;<br>            if(!isSupportPlaceholder) {<br>                var fakePlaceholder = angular.element(<br>                    ‘<b class="plcaeholder">‘ + attr[‘placeholder’] + ‘</b>‘);<br>                fakePlaceholder.on(‘click’, function(e) {<br>                    e.stopPropagation();<br>                    ele.focus();<br>                });<br>                fakePlaceholder.css({<br>                    ‘text-align’: ‘left’,<br>                    ‘line-height’: ‘34px’<br>                });<br>                scope.getElementPosition = function() {<br>                    return ele.position();<br>                };<br>                scope.$watch(scope.getElementPosition, function() {<br>                    fakePlaceholder.css({<br>                        ‘top’: ele.position().top + ‘px’,<br>                        ‘left’: ele.position().left + ‘px’<br>                    });<br>                }, true);<br>                scope.getElementHeight = function() {<br>                    return ele.outerHeight();<br>                };<br>                scope.$watch(scope.getElementHeight, function() {<br>                    fakePlaceholder.css(‘height’, ele.outerHeight() + ‘px’);<br>                });<br>                if(ele.css(‘font-size’)) {<br>                    fakePlaceholder.css(‘font-size’, ele.css(‘font-size’));<br>                }<br>                if(ele.css(‘width’)) {<br>                    fakePlaceholder.css(‘width’, ele.css(‘width’));<br>                }<br>                if(ele.css(‘text-indent’)) {<br>                    fakePlaceholder.css(‘text-indent’,<br>                        parseInt(ele.css(‘text-indent’)) +<br>                        parseInt(ele.css(‘border-left-width’))<br>                    );<br>                }<br>                if(ele.css(‘padding-left’)) {<br>                    fakePlaceholder.css(‘padding-left’, ele.css(‘padding-left’));<br>                }<br>                if(ele.css(‘margin-top’)) {<br>                    fakePlaceholder.css(‘margin-top’, ele.css(‘margin-top’));<br>                }<br>                ele.before(fakePlaceholder);<br>                $compile(fakePlaceholder)(scope);<br>                ele.on(‘focus’, function() {<br>                    fakePlaceholder.hide();<br>                }).on(‘blur’, function() {<br>                    if(ele.val() === ‘’) {<br>                        fakePlaceholder.show();<br>                    }<br>                });<br>                scope.isElementVisible = function() {<br>                    return ele.is(‘:visible’);<br>                };<br>                scope.$watch(scope.isElementVisible, function() {<br>                    var displayVal = ele.is(‘:visible’) ? ‘block’ : ‘none’;<br>                    fakePlaceholder.css(‘display’, displayVal);<br>                    if(displayVal === ‘blcok’ &amp;&amp; ele.val()) {<br>                        fakePlaceholder.hide();<br>                    }<br>                });<br>                scope.hasValue = function() {<br>                    return ele.val();<br>                };<br>                scope.$watch(scope.hasValue, function() {<br>                    if(ele.val()) {<br>                        fakePlaceholder.hide();<br>                    }<br>                });<br>            }<br>        }<br>    };<br>}]);<br></code><br></pre></p><p><pre><br><code><br>&lt;!–[if lte IE 9]&gt;<br>            &lt;script&gt;<br>                $(function(){<br>                        /<em>placeholder兼容</em>/<br>                    $(‘[placeholder]’).each(function(){<br>                        var defaultvalue=$(this).attr(“placeholder”);<br>                        var altercss=$(this).attr(“altercss”);<br>                        if($.trim($(this).val())===’’){<br>                            $(this).val(defaultvalue);<br>                            if(altercss){$(this).addClass(altercss);}<br>                        }<br>                        $(this).focus(function(){<br>                            if($(this).val()==defaultvalue){<br>                                $(this).val(‘’);<br>                                if(altercss){$(this).removeClass(altercss);}<br>                            }<br>                        }).blur(function(){<br>                            if($.trim($(this).val())===’’){<br>                                $(this).val(defaultvalue);<br>                                if(altercss){$(this).addClass(altercss);}<br>                            }<br>                        });<br>                    });<br>                });<br>            &lt;/script&gt;<br>        &lt;![endif]–&gt;<br></code><br></pre></p><p>以上有自己工作总结，欢迎广大群众提意见。真诚向您学习！！！！！！<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;以下是angularJs的兼容，运用指令和IE兼容&quot;&gt;&lt;a href=&quot;#以下是angularJs的兼容，运用指令和IE兼容&quot; class=&quot;headerlink&quot; title=&quot;以下是angularJs的兼容，运用指令和IE兼容&quot;&gt;&lt;/a&gt;以下是angularJ
      
    
    </summary>
    
      <category term="兼容，placeholder" scheme="https://luyuzeee.github.io/categories/%E5%85%BC%E5%AE%B9%EF%BC%8Cplaceholder/"/>
    
    
      <category term="兼容，placeholder，angularJs，IE" scheme="https://luyuzeee.github.io/tags/%E5%85%BC%E5%AE%B9%EF%BC%8Cplaceholder%EF%BC%8CangularJs%EF%BC%8CIE/"/>
    
  </entry>
  
</feed>

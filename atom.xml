<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陆刚的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luyuzeee.github.io/"/>
  <updated>2019-12-24T13:31:03.301Z</updated>
  <id>https://luyuzeee.github.io/</id>
  
  <author>
    <name>Danile</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次H5活动的微信授权与分享的坑</title>
    <link href="https://luyuzeee.github.io/2019/12/24/%E8%AE%B0%E4%B8%80%E6%AC%A1H5%E6%B4%BB%E5%8A%A8%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E4%B8%8E%E5%88%86%E4%BA%AB%E7%9A%84%E5%9D%91/"/>
    <id>https://luyuzeee.github.io/2019/12/24/记一次H5活动的微信授权与分享的坑/</id>
    <published>2019-12-24T08:30:45.000Z</published>
    <updated>2019-12-24T13:31:03.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="H5活动的微信授权与分享"><a href="#H5活动的微信授权与分享" class="headerlink" title="H5活动的微信授权与分享"></a>H5活动的微信授权与分享</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>某一天接到个H5的活动页面需求，需求是如下：  </p><ul><li>总共三个页面（不重要）  </li><li>第一个页面点击跳转第二个页面获取授权，拿取微信信息</li><li>在第二个页面能长按保存整个图片</li><li>自定义分享内容，（三个页面都能分享，是同样的分享内容）<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="1，你需要准备的东西"><a href="#1，你需要准备的东西" class="headerlink" title="1，你需要准备的东西"></a>1，你需要准备的东西</h2></li><li><a href="https://mp.weixin.qq.com/?token=&amp;lang=zh_CN" target="_blank" rel="noopener">微信公众平台——服务号</a></li><li><a href="https://jquery.com/" target="_blank" rel="noopener">jquery</a></li><li><a href="http://html2canvas.hertzen.com/" target="_blank" rel="noopener">html2canvas.js</a></li><li><a href="http://res.wx.qq.com/open/js/jweixin-1.4.0.js" target="_blank" rel="noopener">jweixin-1.4.0.js</a></li><li>sha1.js<h2 id="2，准备页面"><a href="#2，准备页面" class="headerlink" title="2，准备页面"></a>2，准备页面</h2><h2 id="3，公众平台配置网页授权域名"><a href="#3，公众平台配置网页授权域名" class="headerlink" title="3，公众平台配置网页授权域名"></a>3，公众平台配置网页授权域名</h2>在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；<br>前端的东西必须通过这个域名能访问到。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/12/24/记一次H5活动的微信授权与分享的坑/gzhpz.png" alt="参数定义" title="">                </div>                <div class="image-caption">参数定义</div>            </figure>   <h2 id="4，微信授权"><a href="#4，微信授权" class="headerlink" title="4，微信授权"></a>4，微信授权</h2>微信授权分为两种形式，snsapi_base，snsapi_userinfo，区别在于前者是静默状态，只能获取进入页面的用户的openid的，后者是会出现以下页面的，获取用户的基本信息，需要用户手动同意授权，如下：<br><img src="/2019/12/24/记一次H5活动的微信授权与分享的坑/shouquan.png" alt="微信授权"><br>要到达上面的页面，需要开发者调用<pre><code>https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect//若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</code></pre>  上面链接的意思就是，跳转到授权页面，获取code(注意不要改变参数顺序)每个参数的定义如下：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/12/24/记一次H5活动的微信授权与分享的坑/canshu.png" alt="参数定义" title="">                </div>                <div class="image-caption">参数定义</div>            </figure>   以上其实主要修改的参数就是appid和redirect_uri，一个是你的公众号的唯一id,一个是你授权成功后的重定向路径（授权成功后要跳转的页面）。## 5，通过code获取access_token与openId，并且获取到信息获取token的接口<pre><code>https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code</code></pre></li></ul><p>这儿你可能需要这个函数，获取url参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getUrlParam(name) &#123;</span><br><span class="line">  var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">  var r = window.location.search.substr(1).match(reg);</span><br><span class="line">  if (r != null) return unescape(r[2]); return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这儿H5前端请求会存在跨域问题，微信也不支持jsonp,这儿需要解决跨域的问题，才能请求到数据，我在这儿是把code参数传给后端让后端去拿数据，并且通过access_token与openId去拿取用户信息，后面的跨域接口，都是通过后端去转发的</strong><br><strong>请根据你的业务需求，与后端配合解决</strong> </p><p>获取信息得接口：</p><pre><code>https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN</code></pre><p>以上就拿到信息了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  &quot;openid&quot;:&quot; OPENID&quot;,</span><br><span class="line">  &quot;nickname&quot;: NICKNAME,</span><br><span class="line">  &quot;sex&quot;:&quot;1&quot;,</span><br><span class="line">  &quot;province&quot;:&quot;PROVINCE&quot;,</span><br><span class="line">  &quot;city&quot;:&quot;CITY&quot;,</span><br><span class="line">  &quot;country&quot;:&quot;COUNTRY&quot;,  </span><br><span class="line">  &quot;headimgurl&quot;:&quot;http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46&quot;,</span><br><span class="line">  &quot;privilege&quot;:[ &quot;PRIVILEGE1&quot; &quot;PRIVILEGE2&quot;     ],</span><br><span class="line">  &quot;unionid&quot;: &quot;o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>了解更多请参考<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页授权</a>文档</p><h2 id="6，接下来是微信分享自定义"><a href="#6，接下来是微信分享自定义" class="headerlink" title="6，接下来是微信分享自定义"></a>6，接下来是微信分享自定义</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/12/24/记一次H5活动的微信授权与分享的坑/fenxiang.png" alt="微信分享" title="">                </div>                <div class="image-caption">微信分享</div>            </figure>  <p>我们一般是想想要下面的这种结果，微信官方的文档就很清晰了<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">微信JS_SDK</a>  </p><h4 id="1，绑定域名"><a href="#1，绑定域名" class="headerlink" title="1，绑定域名"></a>1，绑定域名</h4><p>同授权的域名方式，进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><h4 id="2，引入js"><a href="#2，引入js" class="headerlink" title="2，引入js"></a>2，引入js</h4><p>1.0.0的版本存在二次分享无效的问题，1.2.0以上就没出现过了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://res.wx.qq.com/open/js/jweixin-1.4.0.js</span><br></pre></td></tr></table></figure></p><h4 id="3，基础access-token获取"><a href="#3，基础access-token获取" class="headerlink" title="3，基础access_token获取"></a>3，基础access_token获取</h4><p><strong>这儿的token和网页授权的token是不一样的</strong>,通过下面的接口获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</span><br></pre></td></tr></table></figure></p><h4 id="4，获得jsapi-ticket"><a href="#4，获得jsapi-ticket" class="headerlink" title="4，获得jsapi_ticket"></a>4，获得jsapi_ticket</h4><p>拿到access_token后，请求下面的接口，获得ticket，获得jsapi_ticket之后，就可以生成JS-SDK权限验证的签名了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</span><br></pre></td></tr></table></figure></p><h4 id="5，JS-SDK权限验证签名"><a href="#5，JS-SDK权限验证签名" class="headerlink" title="5，JS-SDK权限验证签名"></a>5，JS-SDK权限验证签名</h4><p>官网说明要以下四个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">noncestr=&apos;&apos;  //随机字符串</span><br><span class="line">jsapi_ticket=&apos;&apos;  //获取的jsapi_ticket</span><br><span class="line">timestamp=&apos;&apos; //当前时间戳（以秒换算）</span><br><span class="line">url=&apos;&apos; //需要调用的当前url（只需要‘#’前面的部分）</span><br></pre></td></tr></table></figure></p><h5 id="1，随机字符串"><a href="#1，随机字符串" class="headerlink" title="1，随机字符串"></a>1，随机字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.random().toString(36).slice(-8)</span><br></pre></td></tr></table></figure><h5 id="2，获取的jsapi-ticket"><a href="#2，获取的jsapi-ticket" class="headerlink" title="2，获取的jsapi_ticket"></a>2，获取的jsapi_ticket</h5><h5 id="3，时间戳"><a href="#3，时间戳" class="headerlink" title="3，时间戳"></a>3，时间戳</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date.parse(new Date()) / 1000</span><br></pre></td></tr></table></figure><h5 id="4，当前网页的URL"><a href="#4，当前网页的URL" class="headerlink" title="4，当前网页的URL"></a>4，当前网页的URL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href.split(&apos;#&apos;)[0]</span><br></pre></td></tr></table></figure><h5 id="5，签名参数按照字段名的ASCII-码从小到大排序"><a href="#5，签名参数按照字段名的ASCII-码从小到大排序" class="headerlink" title="5，签名参数按照字段名的ASCII 码从小到大排序"></a>5，签名参数按照字段名的ASCII 码从小到大排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function sort_ASCII(obj) &#123;</span><br><span class="line">  var arr = new Array();</span><br><span class="line">  var num = 0;</span><br><span class="line">  for (var i in obj) &#123;</span><br><span class="line">    arr[num] = i;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  var sortArr = arr.sort();</span><br><span class="line">  var sortObj = &#123;&#125;;</span><br><span class="line">  for (var i in sortArr) &#123;</span><br><span class="line">    sortObj[sortArr[i]] = obj[sortArr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  return sortObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6，排序后拼接成如下字符串"><a href="#6，排序后拼接成如下字符串" class="headerlink" title="6，排序后拼接成如下字符串"></a>6，排序后拼接成如下字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsapi_ticket=对应的值&amp;noncestr=对应的值&amp;timestamp=对应的值&amp;url=对应的值</span><br></pre></td></tr></table></figure><h5 id="7，调用sha1-js，进行签名，后获得签名字符串"><a href="#7，调用sha1-js，进行签名，后获得签名字符串" class="headerlink" title="7，调用sha1.js，进行签名，后获得签名字符串"></a>7，调用sha1.js，进行签名，后获得签名字符串</h5><p>这个就要用到文章开始得工具了sha1.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;jsapi_ticket=对应的值&amp;noncestr=对应的值&amp;timestamp=对应的值&amp;url=对应的值&apos;;</span><br><span class="line">sha1(str);</span><br></pre></td></tr></table></figure></p><h4 id="6，注入wx-config配置参数"><a href="#6，注入wx-config配置参数" class="headerlink" title="6，注入wx.config配置参数"></a>6，注入wx.config配置参数</h4><p>timestamp,nonceStr,signature,即上一步所生成的字符串，但是得与上面得保持一致，appId就是前面授权时得唯一标识Id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: true, // 调试（调试完毕后请关闭或者注释）</span><br><span class="line">  appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class="line">  timestamp: &apos;&apos;, // 必填，生成签名的时间戳</span><br><span class="line">  nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class="line">  signature: &apos;&apos;,// 必填，签名</span><br><span class="line">  jsApiList: [&apos;onMenuShareAppMessage&apos;, &apos;onMenuShareTimeline&apos;] // 必填，需要调用的接口列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="7-通过ready接口处理成功验证-在此调用接口-，error接口处理错误"><a href="#7-通过ready接口处理成功验证-在此调用接口-，error接口处理错误" class="headerlink" title="7, 通过ready接口处理成功验证(在此调用接口)，error接口处理错误"></a>7, 通过ready接口处理成功验证(在此调用接口)，error接口处理错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//需在用户可能点击分享按钮前就先调用</span><br><span class="line">wx.ready(function () &#123;</span><br><span class="line">  wx.onMenuShareAppMessage(&#123;</span><br><span class="line">    title: &apos;&apos;, // 分享标题</span><br><span class="line">    desc: &apos;&apos;, // 分享描述</span><br><span class="line">    link: &apos;&apos;, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br><span class="line">    imgUrl: &apos;&apos;, // 分享图标</span><br><span class="line">    success: function () &#123;&#125;,</span><br><span class="line">    cancel: function () &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">wx.error(function () &#123;</span><br><span class="line">  console.log(&quot;错误&quot;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更多接口，请参考<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">微信文档</a></p><h2 id="7，长按保存图片（html2canvas）"><a href="#7，长按保存图片（html2canvas）" class="headerlink" title="7，长按保存图片（html2canvas）"></a>7，长按保存图片（html2canvas）</h2><p>用这个原因时因为，H5不可能是一张图，它是多张图与标签组合的，往往需要微信用户的名字与头像和活动的结果图一起构成的，但是如果直接调用微信的保存图片，只是保存了选中的图片，所以，我们需要把网页截屏成图片覆盖html，让用户直接保存这张截图。<br>网上很多介绍都很简单，类似与<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(document.querySelector(&quot;#capture&quot;)).then(canvas =&gt; &#123;</span><br><span class="line">  var imgUri = canvas.toDataURL(&quot;image/png&quot;, 1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>我大概讲一下我所遇到的坑吧！<br>解决图片跨域,画布污染的问题，<strong><font color="#008000">crossorigin=”anonymous”</font></strong> 和 <strong><font color="#008000">useCORS: true</font></strong><br>调用插件，截屏，你需要选择body一下的某个容器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(</span><br><span class="line">  document.getElementById(&quot;content&quot;),</span><br><span class="line">  &#123;</span><br><span class="line">    useCORS: true,</span><br><span class="line">    allowTaint: true</span><br><span class="line">  &#125;</span><br><span class="line">).then(function (canvas) &#123;</span><br><span class="line">  // 获取生成的图片的base64</span><br><span class="line">  var imgUri = canvas.toDataURL(&quot;image/png&quot;, 1);</span><br><span class="line">  //压缩</span><br><span class="line">  suofang(imgUri, &apos;1.5&apos;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>base64压缩，不多讲了，网上一大堆，直接上函数吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function suofang(base64, bili) &#123;</span><br><span class="line">  var _img = new Image();</span><br><span class="line">  _img.src = base64;</span><br><span class="line">  _img.onload = function () &#123;</span><br><span class="line">    var _canvas = document.createElement(&quot;canvas&quot;);</span><br><span class="line">    var w = this.width / bili;</span><br><span class="line">    var h = this.height / bili;</span><br><span class="line">    _canvas.setAttribute(&quot;width&quot;, w);</span><br><span class="line">    _canvas.setAttribute(&quot;height&quot;, h);</span><br><span class="line">    _canvas.getContext(&quot;2d&quot;).drawImage(this, 0, 0, w, h);</span><br><span class="line">    var base64 = _canvas.toDataURL(&quot;image/jpeg&quot;);</span><br><span class="line">    _canvas.toBlob(function (blob) &#123;</span><br><span class="line">      if (blob.size &gt; 1024 * 1024) &#123;</span><br><span class="line">        suofang(base64, bili);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        $(&quot;#newImg&quot;).attr(&quot;src&quot;, base64);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &quot;image/jpeg&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>了解更多canvas画布污染和图片跨域的问题，请参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_enabled_image" target="_blank" rel="noopener">安全性和“被污染”的 canvas</a> </p><p>到此，就是本次H5活动页的经过。<br>接受所有向上的建议，向各位大佬学习，不接受无理的吐槽喷人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;H5活动的微信授权与分享&quot;&gt;&lt;a href=&quot;#H5活动的微信授权与分享&quot; class=&quot;headerlink&quot; title=&quot;H5活动的微信授权与分享&quot;&gt;&lt;/a&gt;H5活动的微信授权与分享&lt;/h2&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;
      
    
    </summary>
    
      <category term="微信授权，分享，html2canvas保存图片" scheme="https://luyuzeee.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%EF%BC%8C%E5%88%86%E4%BA%AB%EF%BC%8Chtml2canvas%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="H5，微信授权，分享，html2canvas保存图片" scheme="https://luyuzeee.github.io/tags/H5%EF%BC%8C%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%EF%BC%8C%E5%88%86%E4%BA%AB%EF%BC%8Chtml2canvas%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>分享一个H5移动端适配方案</title>
    <link href="https://luyuzeee.github.io/2019/08/13/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AAH5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>https://luyuzeee.github.io/2019/08/13/分享一个H5移动端适配方案/</id>
    <published>2019-08-13T03:24:16.000Z</published>
    <updated>2019-12-24T13:23:24.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享一个H5移动端适配方案"><a href="#分享一个H5移动端适配方案" class="headerlink" title="分享一个H5移动端适配方案"></a>分享一个H5移动端适配方案</h2><p>什么是<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@viewport" target="_blank" rel="noopener">viewport</a>什么是<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@viewport/viewport-fit" target="_blank" rel="noopener">viewport-fit</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; id=&quot;view&quot; content=&quot;width=750, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover&quot;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var viewWidth = window.innerWidth / 750;</span><br><span class="line">  document.getElementById(&quot;view&quot;).setAttribute(&apos;content&apos;, &apos;width=750, initial-scale=&apos; + viewWidth + &apos;, maximum-scale=&apos; + viewWidth + &apos;, minimum-scale=&apos; + viewWidth + &apos;, user-scalable=no, viewport-fit=cover&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>常规的适配就是媒体查询，rem、em，相信大家都清楚了，上面的方法，我是看了斗鱼的网站，我才知道，原来还有这种适配。大家可以随便写个斜面试一试</strong>  </li><li>上面的方案就可以直接去用px了，就不需要rem的换算了，麻烦，比如一张背景图是750 X 1500的，那么这个元素的宽高，就直接写成<code>width:7500px;height:1500px;</code>,其他的交给viewport吧。  </li><li><strong>后期优化，监听视窗宽度，动态设置缩放比例，利用<font color="#00ffff">viewport-fit</font>填充页面，这儿需要注意的是，不是每个屏幕都是矩形的，比如iphone刘海屏，所以填充时要注意这一点。</strong></li><li><strong>还有就是可以搭配vh,vw使用</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分享一个H5移动端适配方案&quot;&gt;&lt;a href=&quot;#分享一个H5移动端适配方案&quot; class=&quot;headerlink&quot; title=&quot;分享一个H5移动端适配方案&quot;&gt;&lt;/a&gt;分享一个H5移动端适配方案&lt;/h2&gt;&lt;p&gt;什么是&lt;a href=&quot;https://develo
      
    
    </summary>
    
      <category term="移动端适配，viewport-fit=cover，viewport" scheme="https://luyuzeee.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%8Cviewport-fit-cover%EF%BC%8Cviewport/"/>
    
    
      <category term="H5，移动端适配，viewport-fit=cover，viewport" scheme="https://luyuzeee.github.io/tags/H5%EF%BC%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%8Cviewport-fit-cover%EF%BC%8Cviewport/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3学习之-axios封装</title>
    <link href="https://luyuzeee.github.io/2018/05/13/vue-cli3%E5%AD%A6%E4%B9%A0%E4%B9%8B-axios%E5%B0%81%E8%A3%85/"/>
    <id>https://luyuzeee.github.io/2018/05/13/vue-cli3学习之-axios封装/</id>
    <published>2018-05-13T07:23:25.000Z</published>
    <updated>2019-12-24T13:23:26.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-cli3学习之-axios封装"><a href="#vue-cli3学习之-axios封装" class="headerlink" title="vue-cli3学习之-axios封装"></a>vue-cli3学习之-axios封装</h2><h4 id="1，准备地址-baseUrl"><a href="#1，准备地址-baseUrl" class="headerlink" title="1，准备地址 baseUrl"></a>1，准备地址 baseUrl</h4><p>根据生产与开发环境来改变不同的地址,新建env.js。<br>此处的 ‘/api’ 是在vue.config.js里配置的地址<br>（参考<a href="/2017/09/12/gulp搭建/">vue-cli3学习之-vue.config.js配置</a>）</p><pre><code>let baseUrl = '';if (process.env.NODE_ENV == 'development') {    baseUrl = '/api';} else if (process.env.NODE_ENV == 'production') {    //baseUrl = '测试地址';    //baseUrl = '预发布地址';    baseUrl = '生产地址';}export {    baseUrl,}</code></pre><h4 id="2，axios请求封装"><a href="#2，axios请求封装" class="headerlink" title="2，axios请求封装"></a>2，axios请求封装</h4><p>封装的前提，你至少得把axios引入吧！在此不多说了<br>在你的项目中应该有一个plugins文件，里面应该有一个axios.js文件，有的话就打开他，没有的话，那就新建一个吧！</p><h6 id="2-1，这是你需要引入的东西"><a href="#2-1，这是你需要引入的东西" class="headerlink" title="2-1，这是你需要引入的东西"></a>2-1，这是你需要引入的东西</h6><pre><code>import {  baseUrl, //引入baseUrl } from "../plugins/env";import axios from 'axios';import qs from 'qs'import { Loading, Message } from 'element-ui'import router from '../router'</code></pre><h6 id="2-2，基本的配置与取值，当然，你也可以把值存在store里，你开心就好"><a href="#2-2，基本的配置与取值，当然，你也可以把值存在store里，你开心就好" class="headerlink" title="2-2，基本的配置与取值，当然，你也可以把值存在store里，你开心就好"></a>2-2，基本的配置与取值，当然，你也可以把值存在store里，你开心就好</h6><pre><code>axios.defaults.timeout = 10000; //设置请求时间axios.defaults.baseURL = baseUrl;//设置默认接口地址axios.defaults.headers = { 'Content-Type': 'application/json; charset=utf-8' };let loadinginstace = '';let token = localStorage.getItem('token'); //从localstorage取值</code></pre><h6 id="2-3，http请求拦截器"><a href="#2-3，http请求拦截器" class="headerlink" title="2-3，http请求拦截器"></a>2-3，http请求拦截器</h6><pre><code>axios.interceptors.request.use(  config => {    loadinginstace = Loading.service({      lock: true,      text: 'Loading',      spinner: 'el-icon-loading',      background: 'rgba(0, 0, 0, 0.3)',      customClass: "osloading",      fullscreen: true    })    if (token) {      config.headers['X-Token'] = getToken()    }    if (config.method === 'post' || config.method === 'put' || config.method === 'delete') {      config.data = qs.stringify(config.data)    }    return config  },  error => {    loadinginstace.close();    return Promise.reject(error)  })</code></pre><h6 id="2-4，http-response-服务器响应拦截器"><a href="#2-4，http-response-服务器响应拦截器" class="headerlink" title="2-4，http response 服务器响应拦截器"></a>2-4，http response 服务器响应拦截器</h6><pre><code>axios.interceptors.response.use(res => {  loadinginstace.close()  if (res.data === '' || res.data.length === 0 || res.data === 'undefined' || res.data === undefined) {    Message({      type: 'error',      message: '数据可能走丢了！'    })  }  return res.data},  error => {    loadinginstace.close()    if (error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1) {      Message({        type: 'error',        message: '请求超时！'      })    }    const errorInfo = error.response    if (errorInfo) {      if (errorInfo.status === 401) {        router.push({          path: '/login'        })      }    }    return Promise.reject(error)  });</code></pre><h6 id="2-5，get-post请求简单封装"><a href="#2-5，get-post请求简单封装" class="headerlink" title="2-5，get,post请求简单封装"></a>2-5，get,post请求简单封装</h6><pre><code>export function fetch(url, params = {}) {  return new Promise((resolve, reject) => {    axios.get(url, {      params: params    })      .then(response => {        resolve(response.data);      })      .catch(err => {        reject(err)      })  })}</code></pre><pre><code>export function post(url, data = {}) {  return new Promise((resolve, reject) => {    axios.post(url, data)      .then(response => {        resolve(response.data);      }, err => {        reject(err)      })  })}</code></pre><h6 id="2-5，在main-js中引入，就可以用了"><a href="#2-5，在main-js中引入，就可以用了" class="headerlink" title="2-5，在main.js中引入，就可以用了"></a>2-5，在main.js中引入，就可以用了</h6><pre><code>import { post, fetch }  from "./plugins/axios";Vue.prototype.$get=fetch;Vue.prototype.$post=post;</code></pre>使用例子<pre><code>this.$post("/login",{"password": "admin","username": "admin"}).then((res)=>{  console.log(res)})</code></pre><h3 id="以下是全部代码"><a href="#以下是全部代码" class="headerlink" title="以下是全部代码"></a>以下是全部代码</h3><pre><code>import {  baseUrl, //引入baseUrl } from "../plugins/env";import axios from 'axios';import qs from 'qs'import { Loading, Message } from 'element-ui'import router from '../router'axios.defaults.timeout = 10000; //设置请求时间axios.defaults.baseURL = baseUrl;//设置默认接口地址axios.defaults.headers = { 'Content-Type': 'application/json; charset=utf-8' };let loadinginstace = '';let token = localStorage.getItem('token'); //从localstorage取值// http请求拦截器axios.interceptors.request.use(  config => {    // element ui Loading方法    loadinginstace = Loading.service({      lock: true,      text: 'Loading',      spinner: 'el-icon-loading',      background: 'rgba(0, 0, 0, 0.3)',      customClass: "osloading",      fullscreen: true    })    if (token) {      config.headers['X-Token'] = getToken() // 让每个请求携带token--['X-Token']为自定义key 请根据实际情况自行修改    }    // 判断为post请求，序列化传来的参数    if (config.method === 'post' || config.method === 'put' || config.method === 'delete') {      config.data = qs.stringify(config.data)    }    return config  },  error => {    loadinginstace.close();    return Promise.reject(error)  })// http response 服务器响应拦截器，axios.interceptors.response.use(res => {  // 请求成功时要做的处理  // 对响应数据做些事，把loading动画关掉  loadinginstace.close()  // 对请求成功的值进行统一判断  //   1.判空  if (res.data === '' || res.data.length === 0 || res.data === 'undefined' || res.data === undefined) {    Message({      type: 'error',      message: '数据可能走丢了！'    })  }  //   2.错误提示(前提是接口跑通了，只是对里边某些值做下详细判断。要先跟后台商定好，对某个固定的字段进行判断，并且确定固定字段来承接 错误信息，方便展示)  // if (res.data && !res.data.success) {  //  console.log(res.data.error.message)  // }  return res.data},  error => {    loadinginstace.close()    //  1.判断请求超时    if (error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1) {      Message({        type: 'error',        message: '请求超时！'      })      // return service.request(originalRequest);//例如再重复请求一次    }    //  2.需要重定向到错误页面    const errorInfo = error.response    if (errorInfo) {      // error =errorInfo.data//页面那边catch的时候就能拿到详细的错误信息,看最下边的Promise.reject      if (errorInfo.status === 401) {        router.push({          path: '/login'        })      }      // if (errorInfo.status === 500) {      //   router.push({      //     path: "/error/500"      //   });      // }      // if (errorInfo.status === 502) {      //   router.push({      //     path: "/error/502"      //   });      // }      // if (errorInfo.status === 404) {      //   router.push({      //     path: "/error/404"      //   });      // }    }    return Promise.reject(error)  });/** * 封装get方法 * @param url * @param data * @returns {Promise}*/export function fetch(url, params = {}) {  return new Promise((resolve, reject) => {    axios.get(url, {      params: params    })      .then(response => {        resolve(response.data);      })      .catch(err => {        reject(err)      })  })}/** * 封装post请求 * @param url * @param data * @returns {Promise} */export function post(url, data = {}) {  return new Promise((resolve, reject) => {    axios.post(url, data)      .then(response => {        resolve(response.data);      }, err => {        reject(err)      })  })}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-cli3学习之-axios封装&quot;&gt;&lt;a href=&quot;#vue-cli3学习之-axios封装&quot; class=&quot;headerlink&quot; title=&quot;vue-cli3学习之-axios封装&quot;&gt;&lt;/a&gt;vue-cli3学习之-axios封装&lt;/h2&gt;&lt;h4 i
      
    
    </summary>
    
      <category term="vue-cli3，axios，封装" scheme="https://luyuzeee.github.io/categories/vue-cli3%EF%BC%8Caxios%EF%BC%8C%E5%B0%81%E8%A3%85/"/>
    
    
      <category term="vue-cli3，axios，封装" scheme="https://luyuzeee.github.io/tags/vue-cli3%EF%BC%8Caxios%EF%BC%8C%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3学习之-vue.config.js配置</title>
    <link href="https://luyuzeee.github.io/2018/05/12/vue-cli3%E5%AD%A6%E4%B9%A0%E4%B9%8B-vue.config.js%E9%85%8D%E7%BD%AE/"/>
    <id>https://luyuzeee.github.io/2018/05/12/vue-cli3学习之-vue.config.js配置/</id>
    <published>2018-05-12T07:23:25.000Z</published>
    <updated>2019-12-24T13:13:29.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-cli3学习之-vue-config-js配置"><a href="#vue-cli3学习之-vue-config-js配置" class="headerlink" title="vue-cli3学习之-vue.config.js配置"></a>vue-cli3学习之-vue.config.js配置</h2><p>在你创建的项目根目录中创建vue.config.js文件<br>这个就是你要在axios中配置的代理地址。<br>devServer一块的配置可以参考 <a href="https://cli.vuejs.org/zh/config/#css-loaderoptions" target="_blank" rel="noopener">https://cli.vuejs.org/zh/config/#css-loaderoptions</a></p><pre><code>proxy: {   "/api": {    target: 'http://192.168.43.143:8080',    ws: true,    pathRewrite: {'^/api' : ''},    changeOrigin: true  }}</code></pre><p>以下是我新建的一个项目的基本代码，如果有不同需求请自行更改</p><pre><code>module.exports = {  publicPath: process.env.NODE_ENV === "production" ? "./" : "./", //基本路径  outputDir: "dist", //输出文件目录  lintOnSave: true, // eslint-loader 是否在保存的时候检查  assetsDir: 'assets', //放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录。  pages: undefined, //以多页模式构建应用程序。  runtimeCompiler: false, //是否使用包含运行时编译器的 Vue 构建版本  parallel: require('os').cpus().length > 1, //是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建，在适当的时候开启几个子进程去并发的执行压缩  transpileDependencies: [],  productionSourceMap: false, //生产环境是否生成 sourceMap 文件，一般情况不建议打开  chainWebpack: config => {    // 修复HMR    config.resolve.symlinks(true);    },  configureWebpack: () => {},  devServer: {    open: true, //配置自动启动浏览器    disableHostCheck: true, // 禁用webpack热重载检查 解决热更新失效问题    host: "localhost",    port: 8088,    https: false,    hotOnly: true, // 热更新    proxy: { //配置自动启动浏览器      "/api": {        target: 'http://192.168.43.143:8080',        ws: true,        pathRewrite: {'^/api' : ''},        changeOrigin: true      }    }    // before: app => {}  },  css: {    modules: false, // 启用 CSS modules    //extract: true, // 是否使用css分离插件    sourceMap: false, // 开启 CSS source maps，一般不建议开启    loaderOptions: { // css预设器配置项      sass: {        data: `          @import "@/assets/css/variable.scss";          @import "@/assets/css/base.scss";          @import "@/assets/css/mixin.scss";          @import "@/assets/css/styleElement.scss";        `      }    }  },  // parallel: require("os").cpus().length > 1, // 是否为 Babel 或 TypeScript 使用 thread-loader  pwa: {}, // 向 PWA 插件传递选项  pluginOptions: {} // 第三方插件配置}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-cli3学习之-vue-config-js配置&quot;&gt;&lt;a href=&quot;#vue-cli3学习之-vue-config-js配置&quot; class=&quot;headerlink&quot; title=&quot;vue-cli3学习之-vue.config.js配置&quot;&gt;&lt;/a&gt;vue-c
      
    
    </summary>
    
      <category term="vue-cli3，vue.config.js，配置" scheme="https://luyuzeee.github.io/categories/vue-cli3%EF%BC%8Cvue-config-js%EF%BC%8C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="vue-cli3，vue.config.js，配置" scheme="https://luyuzeee.github.io/tags/vue-cli3%EF%BC%8Cvue-config-js%EF%BC%8C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>gulp安装</title>
    <link href="https://luyuzeee.github.io/2017/09/12/gulp%E6%90%AD%E5%BB%BA/"/>
    <id>https://luyuzeee.github.io/2017/09/12/gulp搭建/</id>
    <published>2017-09-12T12:46:25.000Z</published>
    <updated>2019-05-13T07:43:31.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以下是gulp的安装"><a href="#以下是gulp的安装" class="headerlink" title="以下是gulp的安装"></a>以下是gulp的安装</h2><h4 id="1，gulp的官网地址"><a href="#1，gulp的官网地址" class="headerlink" title="1，gulp的官网地址"></a>1，gulp的官网地址</h4><p>gulp官网地址：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/</a><br>gulp中文文档：<a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/</a><br>gulp插件地址：<a href="http://gulpjs.com/plugins" target="_blank" rel="noopener">http://gulpjs.com/plugins</a><br>gulpAPI地址：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/api/</a></p><h4 id="2，node"><a href="#2，node" class="headerlink" title="2，node"></a>2，node</h4><p>node下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a> </p><h4 id="3，npm和cnpm"><a href="#3，npm和cnpm" class="headerlink" title="3，npm和cnpm"></a>3，npm和cnpm</h4><p>npm服务器在国外，网络影响大，甚至还会遇到需要翻墙才能下载插件的情况，因此推荐安装cnpm。<br>【淘宝npm镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步】。<br>镜像地址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p><h4 id="4，全局安装gulp"><a href="#4，全局安装gulp" class="headerlink" title="4，全局安装gulp"></a>4，全局安装gulp</h4><p>执行cnpm install gulp -g</p><h4 id="5，新建package-json"><a href="#5，新建package-json" class="headerlink" title="5，新建package.json"></a>5，新建package.json</h4><p>执行命令cnpm init (也可以手动在项目根目录上创建)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/09/12/gulp搭建/20160403162526733.png" alt="创建步骤" title="">                </div>                <div class="image-caption">创建步骤</div>            </figure><br>创建成功后</p><p><pre><br><code><br>{<br>  “name”: “test”,<br>  “version”: “1.0.0”,<br>  “description”: “我是描述”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “test”: “echo \”Error: no test specified\” &amp;&amp; exit 1”<br>  },<br>  “author”: “”,<br>  “license”: “ISC”<br>}<br></code><br></pre></p><h4 id="5，本地安装gulp插件"><a href="#5，本地安装gulp插件" class="headerlink" title="5，本地安装gulp插件"></a>5，本地安装gulp插件</h4><p>注：全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能<br>进入你的项目文件路径中后，执行cnpm install gulp –save-dev </p><p>此步骤完成后：项目文件中多了 node_modules 文件夹，里面是你本地安装的插件</p><h5 id="安装gulp插件（已gulp-sass为例）"><a href="#安装gulp插件（已gulp-sass为例）" class="headerlink" title="安装gulp插件（已gulp-sass为例）"></a>安装gulp插件（已gulp-sass为例）</h5><p>进入你的项目文件路径中后，执行cnpm install gulp-sass –save-dev</p><p>常用插件<br>1，sass的编译（gulp-sass）<br>2，less编译 （gulp-less）<br>3，重命名（gulp-rename）<br>4，图片转换为base64-encoded （gulp-img64）<br>5，自动添加css前缀（gulp-autoprefixer）<br>6，压缩css（gulp-clean-css）<br>7，js代码校验（gulp-jshint）<br>8，合并js文件（gulp-concat）<br>9，压缩js代码（gulp-uglify）<br>10，压缩图片（gulp-imagemin）<br>11，自动刷新页面（gulp-livereload，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）<br>12，图片缓存，只有图片替换了才压缩（gulp-cache）<br>13，更改提醒（gulp-notify）<br>14，阻止 gulp 插件发生错误导致进程退出并输出错误日志(gulp-plumber)</p><h4 id="6，新建gulpfile-js（重要，重要，重要）"><a href="#6，新建gulpfile-js（重要，重要，重要）" class="headerlink" title="6，新建gulpfile.js（重要，重要，重要）"></a>6，新建gulpfile.js（重要，重要，重要）</h4><p>gulpfile.js是gulp的配置文件，放于根目录中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//gulpfile.js 示例文件</span><br><span class="line">//导入你所需要用的工具包 require(&apos;node_modules里对应模块&apos;)</span><br><span class="line">var gulp = require(&apos;gulp&apos;),</span><br><span class="line">    sass = require(&apos;gulp-sass&apos;);</span><br><span class="line">// scss 任务</span><br><span class="line">gulp.task(&apos;sass&apos;,function()&#123;</span><br><span class="line">  return gulp.src(&apos;src/css/test.scss&apos;) //获取该任务需要的文件</span><br><span class="line">      .pipe( sass() )                  //该任务调用的模块</span><br><span class="line">      .pipe( gulp.dest(&apos;src/css&apos;) );   //将在 src/css 文件夹中生产test.css</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;sass&apos;,&apos;watch1&apos;]);</span><br><span class="line">//监听文件</span><br><span class="line">gulp.task(&apos;watch1&apos;,function()&#123;</span><br><span class="line">    return gulp.watch(&apos;src/css/test.scss&apos;,[&apos;sass&apos;]);</span><br><span class="line">    //监听 src/css/test.scss 文件，修改时自动执行 sass 任务。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>详细gulp api介绍，可参考官网：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/api/</a></p><h4 id="7，任务文件匹配"><a href="#7，任务文件匹配" class="headerlink" title="7，任务文件匹配"></a>7，任务文件匹配</h4><h5 id="使用数组的方式来匹配多种文件"><a href="#使用数组的方式来匹配多种文件" class="headerlink" title="//使用数组的方式来匹配多种文件"></a>//使用数组的方式来匹配多种文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([&apos;js/*.js&apos;,&apos;css/*.css&apos;,&apos;*.html&apos;])</span><br><span class="line">//以下是匹配一个文件夹下多个html</span><br><span class="line">gulp.src(&apos;./src/html/**/*.html&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([*.js,&apos;!b*.js&apos;]) //匹配所有js文件，但排除掉以b开头的js文件</span><br><span class="line">gulp.src([&apos;!b*.js&apos;,*.js]) //不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span><br></pre></td></tr></table></figure><p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上!即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><h5 id="HTML-，-js-css-压缩（其他插件请参考参见文档-https-gulpjs-com-plugins-）"><a href="#HTML-，-js-css-压缩（其他插件请参考参见文档-https-gulpjs-com-plugins-）" class="headerlink" title="HTML ， js , css 压缩（其他插件请参考参见文档 https://gulpjs.com/plugins/）"></a>HTML ， js , css 压缩（其他插件请参考参见文档 <a href="https://gulpjs.com/plugins/）" target="_blank" rel="noopener">https://gulpjs.com/plugins/）</a></h5><p>以下是一个简单的HTML ， js , css 压缩gulpfile.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/*gulpfile.js 示例文件*/</span><br><span class="line">//导入你所需要用的工具包 require(&apos;node_modules里对应模块&apos;)</span><br><span class="line">var gulp = require(&apos;gulp&apos;),</span><br><span class="line">    sass = require(&apos;gulp-sass&apos;);</span><br><span class="line">// 获取 clean-css 模块（用于压缩 css）</span><br><span class="line">var cleanCSS = require(&apos;gulp-clean-css&apos;);</span><br><span class="line">// 获取 uglify 模块（用于压缩 JS）</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">// 获取 rename 模块（用于重命名）</span><br><span class="line">var rename = require(&quot;gulp-rename&quot;);</span><br><span class="line">// 获取 htmlmin 模块（用于压缩html）</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">// scss 任务</span><br><span class="line">gulp.task(&apos;sass&apos;,function()&#123;</span><br><span class="line">  return gulp.src(&apos;./src/css/**/*.scss&apos;) //获取该任务需要的文件</span><br><span class="line">      .pipe( sass() )                  //该任务调用的模块</span><br><span class="line">      .pipe( gulp.dest(&apos;./src/css&apos;) );   //将在 src/css 文件夹中生产test.css</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 css 文件</span><br><span class="line">// 在命令行使用 gulp csscompress 启动此任务</span><br><span class="line">gulp.task(&apos;csscompress&apos;, function() &#123;</span><br><span class="line">    // 1. 找到文件</span><br><span class="line">   return gulp.src(&apos;./src/css/**/*.css&apos;)</span><br><span class="line">        .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;))</span><br><span class="line">    // 2. 压缩文件</span><br><span class="line">        .pipe(cleanCSS())</span><br><span class="line">        // 3. 另存压缩后的文件</span><br><span class="line">        .pipe(gulp.dest(&apos;./src/dist/css&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 js 文件</span><br><span class="line">// 在命令行使用 gulp jscompress 启动此任务</span><br><span class="line">gulp.task(&apos;jscompress&apos;, function() &#123;</span><br><span class="line">    // 1. 找到文件</span><br><span class="line">   return gulp.src(&apos;./src/js/**/*.js&apos;)</span><br><span class="line">   .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;))</span><br><span class="line">    // 2. 压缩文件</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        // 3. 另存压缩后的文件</span><br><span class="line">        .pipe(gulp.dest(&apos;./src/dist/js&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">//压缩HTML</span><br><span class="line">gulp.task(&apos;minify&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./src/html/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,//清除HTML注释</span><br><span class="line">    collapseWhitespace: true,//压缩HTML</span><br><span class="line">    collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">    removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">    removeScriptTypeAttributes: true,//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class="line">    removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class="line">    minifyJS: true,//压缩页面JS</span><br><span class="line">    minifyCSS: true//压缩页面CSS</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./src/dist/html&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;auto&apos;]);</span><br><span class="line">//监听文件</span><br><span class="line">gulp.task(&apos;auto&apos;,function()&#123;</span><br><span class="line">   gulp.watch(&apos;./src/css/**/*.scss&apos;,[&apos;sass&apos;]); //编译sass</span><br><span class="line">   gulp.watch(&apos;./src/css/**/*.css&apos;,[&apos;csscompress&apos;]);//压缩css</span><br><span class="line">    gulp.watch(&apos;./src/js/**/*.js&apos;,[&apos;jscompress&apos;]);//压缩js</span><br><span class="line">    gulp.watch(&apos;./src/html/**/*.html&apos;,[&apos;minify&apos;]);//压缩html</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="8，运行"><a href="#8，运行" class="headerlink" title="8，运行"></a>8，运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line"></span><br><span class="line">gulp xxxxx       (xxxxx代表gulpfile.js文件里的任务名称)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;以下是gulp的安装&quot;&gt;&lt;a href=&quot;#以下是gulp的安装&quot; class=&quot;headerlink&quot; title=&quot;以下是gulp的安装&quot;&gt;&lt;/a&gt;以下是gulp的安装&lt;/h2&gt;&lt;h4 id=&quot;1，gulp的官网地址&quot;&gt;&lt;a href=&quot;#1，gulp的官网地
      
    
    </summary>
    
      <category term="gulp，压缩，优化，插件，API" scheme="https://luyuzeee.github.io/categories/gulp%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%8C%E4%BC%98%E5%8C%96%EF%BC%8C%E6%8F%92%E4%BB%B6%EF%BC%8CAPI/"/>
    
    
      <category term="gulp，压缩，优化，插件，API" scheme="https://luyuzeee.github.io/tags/gulp%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%8C%E4%BC%98%E5%8C%96%EF%BC%8C%E6%8F%92%E4%BB%B6%EF%BC%8CAPI/"/>
    
  </entry>
  
  <entry>
    <title>placeholder兼容问题</title>
    <link href="https://luyuzeee.github.io/2017/07/13/placeholder%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://luyuzeee.github.io/2017/07/13/placeholder兼容问题/</id>
    <published>2017-07-13T12:46:25.000Z</published>
    <updated>2017-12-05T03:12:33.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以下是angularJs的兼容，运用指令和IE兼容"><a href="#以下是angularJs的兼容，运用指令和IE兼容" class="headerlink" title="以下是angularJs的兼容，运用指令和IE兼容"></a>以下是angularJs的兼容，运用指令和IE兼容</h2><p><pre><br><code><br>starterDirective.directive(‘placeholder’, [‘$compile’, function($compile) {<br>    return {<br>        restrict: ‘A’,<br>        scope: {},<br>        link: function(scope, ele, attr) {<br>            console.log(ele.position().top);<br>            var input = document.createElement(‘input’);<br>            var isSupportPlaceholder = ‘placeholder’ in input;<br>            if(!isSupportPlaceholder) {<br>                var fakePlaceholder = angular.element(<br>                    ‘<b class="plcaeholder">‘ + attr[‘placeholder’] + ‘</b>‘);<br>                fakePlaceholder.on(‘click’, function(e) {<br>                    e.stopPropagation();<br>                    ele.focus();<br>                });<br>                fakePlaceholder.css({<br>                    ‘text-align’: ‘left’,<br>                    ‘line-height’: ‘34px’<br>                });<br>                scope.getElementPosition = function() {<br>                    return ele.position();<br>                };<br>                scope.$watch(scope.getElementPosition, function() {<br>                    fakePlaceholder.css({<br>                        ‘top’: ele.position().top + ‘px’,<br>                        ‘left’: ele.position().left + ‘px’<br>                    });<br>                }, true);<br>                scope.getElementHeight = function() {<br>                    return ele.outerHeight();<br>                };<br>                scope.$watch(scope.getElementHeight, function() {<br>                    fakePlaceholder.css(‘height’, ele.outerHeight() + ‘px’);<br>                });<br>                if(ele.css(‘font-size’)) {<br>                    fakePlaceholder.css(‘font-size’, ele.css(‘font-size’));<br>                }<br>                if(ele.css(‘width’)) {<br>                    fakePlaceholder.css(‘width’, ele.css(‘width’));<br>                }<br>                if(ele.css(‘text-indent’)) {<br>                    fakePlaceholder.css(‘text-indent’,<br>                        parseInt(ele.css(‘text-indent’)) +<br>                        parseInt(ele.css(‘border-left-width’))<br>                    );<br>                }<br>                if(ele.css(‘padding-left’)) {<br>                    fakePlaceholder.css(‘padding-left’, ele.css(‘padding-left’));<br>                }<br>                if(ele.css(‘margin-top’)) {<br>                    fakePlaceholder.css(‘margin-top’, ele.css(‘margin-top’));<br>                }<br>                ele.before(fakePlaceholder);<br>                $compile(fakePlaceholder)(scope);<br>                ele.on(‘focus’, function() {<br>                    fakePlaceholder.hide();<br>                }).on(‘blur’, function() {<br>                    if(ele.val() === ‘’) {<br>                        fakePlaceholder.show();<br>                    }<br>                });<br>                scope.isElementVisible = function() {<br>                    return ele.is(‘:visible’);<br>                };<br>                scope.$watch(scope.isElementVisible, function() {<br>                    var displayVal = ele.is(‘:visible’) ? ‘block’ : ‘none’;<br>                    fakePlaceholder.css(‘display’, displayVal);<br>                    if(displayVal === ‘blcok’ &amp;&amp; ele.val()) {<br>                        fakePlaceholder.hide();<br>                    }<br>                });<br>                scope.hasValue = function() {<br>                    return ele.val();<br>                };<br>                scope.$watch(scope.hasValue, function() {<br>                    if(ele.val()) {<br>                        fakePlaceholder.hide();<br>                    }<br>                });<br>            }<br>        }<br>    };<br>}]);<br></code><br></pre></p><p><pre><br><code><br>&lt;!–[if lte IE 9]&gt;<br>            &lt;script&gt;<br>                $(function(){<br>                        /<em>placeholder兼容</em>/<br>                    $(‘[placeholder]’).each(function(){<br>                        var defaultvalue=$(this).attr(“placeholder”);<br>                        var altercss=$(this).attr(“altercss”);<br>                        if($.trim($(this).val())===’’){<br>                            $(this).val(defaultvalue);<br>                            if(altercss){$(this).addClass(altercss);}<br>                        }<br>                        $(this).focus(function(){<br>                            if($(this).val()==defaultvalue){<br>                                $(this).val(‘’);<br>                                if(altercss){$(this).removeClass(altercss);}<br>                            }<br>                        }).blur(function(){<br>                            if($.trim($(this).val())===’’){<br>                                $(this).val(defaultvalue);<br>                                if(altercss){$(this).addClass(altercss);}<br>                            }<br>                        });<br>                    });<br>                });<br>            &lt;/script&gt;<br>        &lt;![endif]–&gt;<br></code><br></pre></p><p>以上有自己工作总结，欢迎广大群众提意见。真诚向您学习！！！！！！<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;以下是angularJs的兼容，运用指令和IE兼容&quot;&gt;&lt;a href=&quot;#以下是angularJs的兼容，运用指令和IE兼容&quot; class=&quot;headerlink&quot; title=&quot;以下是angularJs的兼容，运用指令和IE兼容&quot;&gt;&lt;/a&gt;以下是angularJ
      
    
    </summary>
    
      <category term="兼容，placeholder" scheme="https://luyuzeee.github.io/categories/%E5%85%BC%E5%AE%B9%EF%BC%8Cplaceholder/"/>
    
    
      <category term="兼容，placeholder，angularJs，IE" scheme="https://luyuzeee.github.io/tags/%E5%85%BC%E5%AE%B9%EF%BC%8Cplaceholder%EF%BC%8CangularJs%EF%BC%8CIE/"/>
    
  </entry>
  
</feed>
